require("dotenv").config();
const express = require("express");
const bodyParser = require("body-parser");
const storageAccount = require("./storage");
const client = require("prom-client");

const collectDefaultMetrics = client.collectDefaultMetrics;
const prefix = "radix_vulnerabilties_api";
collectDefaultMetrics({ prefix });
const gauge_vulnerabilities = new client.Gauge({
  name: "radix_vulnerabilities_gauge",
  help: "help",
  labelNames: ["image", "severity"],
});
const storage = storageAccount.vulnerabilities();
const app = express();

// TODO: error handling in general
app.use(bodyParser.json({ limit: "100mb" }));
app.use(bodyParser.urlencoded({ limit: "100mb", extended: false }));
app.use(bodyParser.json());

app.get("/images", (req, res) => {
  storage.getImages(function (images, err) {
    if (err) {
      res.status(500);
      res.end();
    } else {
      res.json(images);
    }
  });
});

app.delete("/images", (req, res) => {
  storage.deleteAllImagesAndVulnerabilities(function (images, err) {
    if (err) {
      res.status(500);
      res.end();
    } else {
      res.json(images);
    }
  });
});

app.get("/images/:image/vulnerabilities", (req, res) => {
  storage.getVulnerabilitiesByImage(req.params.image, function (
    vulnerabilities,
    err
  ) {
    if (err) {
      res.status(500);
      res.end();
    } else {
      res.json(vulnerabilities);
    }
  });
});

app.post("/images/:image/vulnerabilities", (req, res) => {
  const image = req.params.image;
  const vulnerabilities = req.body.map((target) => {
    return {
      Image: image,
      Target: target.Target,
      Vulnerabilities: target.Vulnerabilities ? target.Vulnerabilities : [],
    };
  });
  storage.saveVulnerabilities(vulnerabilities);
  res.end();
});

const setMetrics = (callback) => {
  gauge_vulnerabilities.reset();

  storage.getImages(function (images, err) {
    if (err) {
      callback();
    } else {
      images.forEach((savedImage) => {
        gauge_vulnerabilities.set(
          { image: savedImage.Image, severity: "Critical" },
          savedImage.Critical
        );
        gauge_vulnerabilities.set(
          { image: savedImage.Image, severity: "High" },
          savedImage.High
        );
        gauge_vulnerabilities.set(
          { image: savedImage.Image, severity: "Medium" },
          savedImage.Medium
        );
        gauge_vulnerabilities.set(
          { image: savedImage.Image, severity: "Low" },
          savedImage.Low
        );
        gauge_vulnerabilities.set(
          { image: savedImage.Image, severity: "Unknown" },
          savedImage.Unknown
        );
      });
      callback();
    }
  });
};

app.get("/metrics", (req, res) => {
  setMetrics(() => {
    res.set("Content-Type", client.register.contentType);
    res.end(client.register.metrics());
  });
});

app.listen(3000, () => {
  storage.bootstrap();

  console.log("Server running on port 3000");
});
