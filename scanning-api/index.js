require("dotenv").config();
const express = require("express");
const bodyParser = require("body-parser");
const storageAccount = require("./storage");

const storage = storageAccount.vulnerabilities();
const app = express();

// TODO: error handling in general
app.use(bodyParser.json({ limit: "100mb" }));
app.use(bodyParser.urlencoded({ limit: "100mb", extended: false }));
app.use(bodyParser.json());

app.get("/images", (req, res) => {
  storage.getImages(function (images, err) {
    if (err) {
      res.status(500);
      res.end();
    } else {
      res.json(images);
    }
  });
});

app.delete("/images", (req, res) => {
  storage.deleteAllImagesAndVulnerabilities(function (images, err) {
    if (err) {
      res.status(500);
      res.end();
    } else {
      res.json(images);
    }
  });
});

app.get("/images/:image/vulnerabilities", (req, res) => {
  storage.getVulnerabilitiesByImage(req.params.image, function (
    vulnerabilities,
    err
  ) {
    if (err) {
      res.status(500);
      res.end();
    } else {
      res.json(vulnerabilities);
    }
  });
});

app.post("/images/:image/vulnerabilities", (req, res) => {
  const image = req.params.image;
  const vulnerabilities = req.body.map((target) => {
    return {
      Image: image,
      Target: target.Target,
      Vulnerabilities: target.Vulnerabilities ? target.Vulnerabilities : [],
    };
  });
  storage.saveVulnerabilities(vulnerabilities);
  res.end();
});

app.listen(3000, () => {
  storage.bootstrap();

  console.log("Server running on port 3000");
});
