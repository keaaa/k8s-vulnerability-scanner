const azure = require("azure-storage");

// one table for each image:tag
// delete table on each test
// partition key = Target
// rowkey = VulnerabilityID

exports.vulnerabilities = () => {
  const tableName = "vulnerabilities";
  const imageTableName = "images";
  const imagePartitionKey = "reftable";

  const bootstrap = () => {
    const tableService = azure.createTableService();
    tableService.createTableIfNotExists(tableName, function (error) {
      if (error) {
        throw error;
      }
    });
    tableService.createTableIfNotExists(imageTableName, function (error) {
      if (error) {
        throw error;
      }
    });
  };

  const getImages = (callback) => {
    var tableService = azure.createTableService();
    var query = new azure.TableQuery().where(
      "PartitionKey eq ?",
      imagePartitionKey
    );

    tableService.queryEntities(imageTableName, query, null, function (
      error,
      result
    ) {
      if (!error) {
        const images = result.entries.map((entity) => entityToImage(entity));
        callback(images);
      } else {
        callback(null, error);
      }
    });
  };

  const getVulnerabilitiesByImage = (image, callback) => {
    var tableService = azure.createTableService();
    var query = new azure.TableQuery().where("PartitionKey eq ?", image);

    tableService.queryEntities(tableName, query, null, function (
      error,
      result
    ) {
      if (!error) {
        const vulnerabilities = result.entries.map((entity) =>
          entityToVul(entity)
        );
        callback(vulnerabilities);
      } else {
        console.log(error);
        callback(null, error);
      }
    });
  };

  const getVulnerabilityById = (image, id, callback) => {
    var tableService = azure.createTableService();
    tableService.retrieveEntity(tableName, image, id, function (error, result) {
      if (!error) {
        callback(entityToVul(result));
      } else {
        callback(null, error);
      }
    });
  };

  const saveVulnerabilities = (vulnerabilities) => {
    const tableService = azure.createTableService();
    const imageEntity = vulnerabilitiesToImageEntity(vulnerabilities);
    vulnerabilities.forEach((vul) => saveVulnerability(vul, tableService));
    tableService.insertOrReplaceEntity(imageTableName, imageEntity, function (
      error
    ) {
      if (error) {
        console.log(error);
      }
    });
  };

  const saveVulnerability = (vul, tableService) => {
    if (!tableService) {
      tableService = azure.createTableService();
    }
    const entity = vulToEntity(vul);
    tableService.insertOrReplaceEntity(tableName, entity, function (error) {
      if (error) {
        console.log(error);
      }
    });
  };

  const deleteVulnerabilityByImage = (image, callback) => {
    getVulnerabilitiesByImage(image, function (vulnerabilities) {
      const tableService = azure.createTableService();
      vulnerabilities.forEach((vul) => {
        const entity = vulToEntity(vul);
        tableService.deleteEntity(tableName, entity, function (error) {
          if (error) {
            console.log(error);
          }
        });
        callback();
      });
      if (!vulnerabilities || vulnerabilities.length === 0) {
        callback();
      }
    });
  };

  const deleteVulnerabilityById = (image, id) => {
    getVulnerabilityById(image, id, function (vul) {
      const tableService = azure.createTableService();
      const entity = vulToEntity(vul);
      tableService.deleteEntity(tableName, entity, function (error) {
        if (error) {
          console.log(error);
        }
      });
    });
  };

  const vulnerabilitiesToImageEntity = (vulnerabilities) => {
    const entGen = azure.TableUtilities.entityGenerator;
    const image = vulnerabilities[0].Image;
    return {
      PartitionKey: entGen.String(imagePartitionKey),
      RowKey: entGen.String(Buffer.from(image).toString("base64")),
      Image: entGen.String(image),
      Critical: entGen.Int32(
        getNrOfVulerabilitiesBySeverity(vulnerabilities, "CRITICAL")
      ),
      High: entGen.Int32(
        getNrOfVulerabilitiesBySeverity(vulnerabilities, "HIGH")
      ),
      Medium: entGen.Int32(
        getNrOfVulerabilitiesBySeverity(vulnerabilities, "MEDIUM")
      ),
      Low: entGen.Int32(
        getNrOfVulerabilitiesBySeverity(vulnerabilities, "LOW")
      ),
      Unknown: entGen.Int32(
        getNrOfVulerabilitiesBySeverity(vulnerabilities, "UNKNOWN")
      ),
    };
  };

  const getNrOfVulerabilitiesBySeverity = (vulnerabilities, severity) => {
    const nr = vulnerabilities.reduce(
      (prev, curr) =>
        prev +
        curr.Vulnerabilities.filter((v) => v.Severity === severity).length,
      0
    );
    console.log(nr);
    return nr;
  };

  const entityToImage = (entity) => {
    return {
      Image: entity.Image ? entity.Image._ : "",
      Critical: entity.Critical ? entity.Critical._ : 0,
      High: entity.High ? entity.High._ : 0,
      Medium: entity.Medium ? entity.Medium._ : 0,
      Low: entity.Low ? entity.Low._ : 0,
      Unknown: entity.Unknown ? entity.Unknown._ : 0,
    };
  };

  const vulToEntity = (vul) => {
    const entGen = azure.TableUtilities.entityGenerator;
    return {
      PartitionKey: entGen.String(Buffer.from(vul.Image).toString("base64")),
      RowKey: entGen.String(Buffer.from(vul.Target).toString("base64")),
      Image: entGen.String(vul.Image),
      Target: entGen.String(vul.Target),
      Vulnerabilities: vul.Vulnerabilities
        ? JSON.stringify(vul.Vulnerabilities)
        : "",
    };
  };

  const entityToVul = (entity) => {
    return {
      Image: entity.PartitionKey ? entity.PartitionKey._ : "",
      Target: entity.Target ? entity.Target._ : "",
      Vulnerabilities:
        entity.Vulnerabilities && entity.Vulnerabilities._
          ? JSON.parse(entity.Vulnerabilities._)
          : [],
    };
  };

  return {
    bootstrap,
    getImages,
    getVulnerabilitiesByImage,
    getVulnerabilityById,
    saveVulnerability,
    saveVulnerabilities,
    deleteVulnerabilityById,
    deleteVulnerabilityByImage,
  };
};
