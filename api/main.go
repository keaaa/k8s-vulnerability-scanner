package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	_ "github.com/denisenkom/go-mssqldb"
	"github.com/gorilla/handlers"
	"github.com/gorilla/mux"
	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promhttp"
	_ "k8s.io/client-go/plugin/pkg/client/auth"
)

var vulnerabilityGauge = prometheus.NewGaugeVec(prometheus.GaugeOpts{
	Name: "image_vulnerabilities_gauge",
	Help: "number of vulnerabilities on images by severity.",
}, []string{"image", "target", "severity"})

const (
	port = 1433
)

var sqlClient SQLClient

func main() {
	prometheus.MustRegister(vulnerabilityGauge)
	sqlClient := NewSQLClient(os.Getenv("SQL_SERVER"), os.Getenv("SQL_DATABASE"), port, os.Getenv("SQL_USER"), os.Getenv("SQL_PASSWORD"))
	server := setupServer(sqlClient)
	quit := updateMetricSchedule(sqlClient)

	// for graceful shutdown of service.
	done := make(chan os.Signal, 1)
	signal.Notify(done, os.Interrupt, syscall.SIGINT, syscall.SIGTERM)

	go func() {
		if err := server.ListenAndServe(); err != nil {
			log.Println("[scanning-organizer]", "failed,", err)
		}
	}()

	<-done

	gracefullShutdown(server, quit)
}

func setupServer(sqlClient SQLClient) *http.Server {
	router := mux.NewRouter().StrictSlash(true)
	router.PathPrefix("/metrics").Handler(promhttp.Handler())
	router.PathPrefix("/vulnerabilities").HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		GetVulnerabilitiesByImageName(sqlClient, w, r)
	})
	router.PathPrefix("/runs/{id}/vulnerabilities").Methods("POST").Handler(handlers.CombinedLoggingHandler(log.Writer(), http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		SaveVulnerabilities(sqlClient, w, r)
	})))
	router.PathPrefix("/runs").Methods("POST").Handler(handlers.CombinedLoggingHandler(log.Writer(), http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		NewRunHandler(sqlClient, w, r)
	})))

	port := os.Getenv("PORT")

	if port == "" {
		port = "8080"
	}

	// Created a new server instance
	log.Printf("[scanning-organizer] listening on port %s", port)
	return &http.Server{Addr: fmt.Sprintf(":%s", port), Handler: router}
}

func updateMetricSchedule(sqlClient SQLClient) chan struct{} {
	quit := make(chan struct{})
	ticker := time.NewTicker(time.Minute * 1)
	go func() {
		for {
			select {
			case <-ticker.C:
				// todo - update when all result from a vulnerability run returns
				updateMetrics(sqlClient)
			case <-quit:
				ticker.Stop()
				return
			}
		}
	}()
	return quit
}

func updateMetrics(sqlClient SQLClient) {
	log.Printf("Updating vulnerability metrics")
	images, err := sqlClient.GetLatestImageSummaries()
	if err != nil {
		log.Printf("Warning - failed to get latest image summary. %v", err)
	}
	vulnerabilityGauge.Reset()

	for _, image := range images {
		vulnerabilityGauge.With(prometheus.Labels{"image": image.Name, "target": image.Target, "severity": string(Critical)}).Set(float64(image.CriticalSeverity))
		vulnerabilityGauge.With(prometheus.Labels{"image": image.Name, "target": image.Target, "severity": string(High)}).Set(float64(image.HighSeverity))
		vulnerabilityGauge.With(prometheus.Labels{"image": image.Name, "target": image.Target, "severity": string(Medium)}).Set(float64(image.MediumSeverity))
		vulnerabilityGauge.With(prometheus.Labels{"image": image.Name, "target": image.Target, "severity": string(Low)}).Set(float64(image.LowSeverity))
		vulnerabilityGauge.With(prometheus.Labels{"image": image.Name, "target": image.Target, "severity": string(Unknown)}).Set(float64(image.UnknownSeverity))
	}
}

func logRequest(handler http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		log.Printf("%s %s %s\n", r.RemoteAddr, r.Method, r.URL)
		handler.ServeHTTP(w, r)
	})
}

func gracefullShutdown(server *http.Server, quit chan struct{}) {
	log.Println("[Gracefull shutdown]")
	// Gracefull Shutdown added.
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer func() {
		close(quit)
		// extra handling here
		cancel()
	}()

	if err := server.Shutdown(ctx); err != nil {
		log.Fatalf("Server Shutdown Failed:%+v", err)
	}
}
