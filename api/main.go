package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"
	"time"

	_ "github.com/denisenkom/go-mssqldb"
	"github.com/gorilla/mux"
	_ "k8s.io/client-go/plugin/pkg/client/auth"
)

const (
	defaultNamespace = "image-scanner"
	secretName       = "acr-cred"
	port             = 1433
)

var sqlClient SQLClient

func main() {
	sqlClient := NewSQLClient(os.Getenv("SQL_SERVER"), os.Getenv("SQL_DATABASE"), port, os.Getenv("SQL_USER"), os.Getenv("SQL_PASSWORD"))

	router := mux.NewRouter().StrictSlash(true)
	router.PathPrefix("/runs/{id}/images/{image}/vulnerabilities").Methods("POST").HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		saveVulnerabilities(sqlClient, w, r)
	}) // get + post
	router.PathPrefix("/runs").Methods("POST").HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		newRunHandler(sqlClient, w, r)
	})

	port := os.Getenv("PORT")

	if port == "" {
		port = "8080"
	}

	// for graceful shutdown of service.
	done := make(chan os.Signal, 1)
	signal.Notify(done, os.Interrupt, syscall.SIGINT, syscall.SIGTERM)

	// Created a new server instance
	log.Printf("[scanning-organizer] listening on port %s", port)
	server := &http.Server{Addr: fmt.Sprintf(":%s", port), Handler: router}

	go func() {
		if err := server.ListenAndServe(); err != nil {
			log.Println("[scanning-organizer]", "failed,", err)
		}
	}()

	<-done

	log.Println("[Gracefull shutdown]")
	// Gracefull Shutdown added.
	ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	defer func() {
		// extra handling here
		cancel()
	}()

	if err := server.Shutdown(ctx); err != nil {
		log.Fatalf("Server Shutdown Failed:%+v", err)
	}
}
