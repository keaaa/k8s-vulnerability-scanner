package main

import (
	"crypto/md5"
	"encoding/hex"
	"fmt"
	"net/url"
	"os"
	"strings"
	"time"

	batchv1 "k8s.io/api/batch/v1"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/client-go/kubernetes"
)

func scanImage(clientset *kubernetes.Clientset, runID int, image string) (error, string) {
	namespace := os.Getenv("RUN_IN_NAMESPACE")
	// create job
	job := createScanJob(runID, image)
	_, err := clientset.BatchV1().Jobs(namespace).Create(job)
	return err, job.GetName()
}

func getImageName(image string) string {
	h := md5.New()
	h.Write([]byte(image))
	bs := h.Sum(nil)
	return hex.EncodeToString(bs)
}

func createScanJob(runID int, image string) *batchv1.Job {
	serviceEndpoint := os.Getenv("SERVICE_ENDPOINT")
	secretName := os.Getenv("PRIVATE_CR_SECRET_NAME")
	imageScanner := os.Getenv("IMAGE_SCANNER")
	privateImageHubName := os.Getenv("PRIVATE_IMAGE_HUB_NAME")

	timestamp := time.Now().Format("20060102150405")
	imageName := getImageName(image)
	backOffLimit := int32(0)

	job := batchv1.Job{
		ObjectMeta: metav1.ObjectMeta{
			Name: fmt.Sprintf("image-scanner-%s-%s", timestamp, imageName),
		},
		Spec: batchv1.JobSpec{
			BackoffLimit: &backOffLimit,
			Template: corev1.PodTemplateSpec{
				Spec: corev1.PodSpec{
					RestartPolicy: "Never",
					Containers: []corev1.Container{
						{
							Name:            "image-scanner",
							Image:           imageScanner,
							ImagePullPolicy: corev1.PullAlways,
							Env: []corev1.EnvVar{
								{
									Name:  "IMAGE_PATH",
									Value: image,
								},
								{
									Name:  "URL_RESULT",
									Value: fmt.Sprintf("http://%s:8080/runs/%v/vulnerabilities?image=%s", serviceEndpoint, runID, url.QueryEscape(image)),
								},
							},
						},
					},
				},
			},
		},
	}
	if strings.HasPrefix(image, privateImageHubName) {
		job.Spec.Template.Spec.Containers[0].Env = append(job.Spec.Template.Spec.Containers[0].Env, corev1.EnvVar{
			Name: "TRIVY_USERNAME",
			ValueFrom: &corev1.EnvVarSource{
				SecretKeyRef: &corev1.SecretKeySelector{
					Key: "username",
					LocalObjectReference: corev1.LocalObjectReference{
						Name: secretName,
					},
				},
			},
		},
			corev1.EnvVar{
				Name: "TRIVY_PASSWORD",
				ValueFrom: &corev1.EnvVarSource{
					SecretKeyRef: &corev1.SecretKeySelector{
						Key: "password",
						LocalObjectReference: corev1.LocalObjectReference{
							Name: secretName,
						},
					},
				},
			})
	}

	return &job
}
