package main

import (
	_ "k8s.io/client-go/plugin/pkg/client/auth"
)

const (
	defaultNamespace = "image-scanner"
	secretName       = "acr-cred"
)

func main() {
	defaultHandler()
	// router := mux.NewRouter().StrictSlash(true)
	// router.PathPrefix("/").HandlerFunc(defaultHandler)
	// port := os.Getenv("PORT")

	// if port == "" {
	// 	port = "8080"
	// }

	// // for graceful shutdown of service.
	// done := make(chan os.Signal, 1)
	// signal.Notify(done, os.Interrupt, syscall.SIGINT, syscall.SIGTERM)

	// // Created a new server instance
	// log.Printf("[scanning-organizer] listening on port %s", port)
	// server := &http.Server{Addr: fmt.Sprintf(":%s", port), Handler: router}

	// go func() {
	// 	if err := server.ListenAndServe(); err != nil {
	// 		log.Println("[scanning-organizer]", "failed,", err)
	// 	}
	// }()

	// <-done

	// log.Println("[Gracefull shutdown]")
	// // Gracefull Shutdown added.
	// ctx, cancel := context.WithTimeout(context.Background(), 5*time.Second)
	// defer func() {
	// 	// extra handling here
	// 	cancel()
	// }()

	// if err := server.Shutdown(ctx); err != nil {
	// 	log.Fatalf("Server Shutdown Failed:%+v", err)
	// }
}
