package main

import (
	"fmt"
	"strings"
	"time"

	batchv1 "k8s.io/api/batch/v1"
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/client-go/kubernetes"
)

func scanImage(clientset *kubernetes.Clientset, image string) error {
	// create job
	job := createScanJob(image)
	_, err := clientset.BatchV1().Jobs(defaultNamespace).Create(job)
	return err
}

func getImageName(image string) string {
	imageName := []rune{}
	for _, r := range image {
		if r == '/' {
			imageName = []rune{}
		} else if r == ':' {
			break
		} else {
			imageName = append(imageName, r)
		}
	}
	return string(imageName)
}

func createScanJob(image string) *batchv1.Job {
	timestamp := time.Now().Format("20060102150405")
	imageName := getImageName(image)
	backOffLimit := int32(0)

	job := batchv1.Job{
		ObjectMeta: metav1.ObjectMeta{
			Name: fmt.Sprintf("image-scanner-%s-%s", timestamp, imageName),
		},
		Spec: batchv1.JobSpec{
			BackoffLimit: &backOffLimit,
			Template: corev1.PodTemplateSpec{
				Spec: corev1.PodSpec{
					RestartPolicy: "Never",
					Containers: []corev1.Container{
						corev1.Container{
							Name:            "image-scanner",
							Image:           "keaaa/image-scanner:latest",
							ImagePullPolicy: corev1.PullAlways,
							Env: []corev1.EnvVar{
								corev1.EnvVar{
									Name:  "IMAGE_PATH",
									Value: image,
								},
							},
						},
					},
				},
			},
		},
	}
	if strings.HasPrefix(image, "radixdev.azurecr.io") {
		job.Spec.Template.Spec.Containers[0].Env = append(job.Spec.Template.Spec.Containers[0].Env, corev1.EnvVar{
			Name: "TRIVY_USERNAME",
			ValueFrom: &corev1.EnvVarSource{
				SecretKeyRef: &corev1.SecretKeySelector{
					Key: "username",
					LocalObjectReference: corev1.LocalObjectReference{
						Name: secretName,
					},
				},
			},
		},
			corev1.EnvVar{
				Name: "TRIVY_PASSWORD",
				ValueFrom: &corev1.EnvVarSource{
					SecretKeyRef: &corev1.SecretKeySelector{
						Key: "password",
						LocalObjectReference: corev1.LocalObjectReference{
							Name: secretName,
						},
					},
				},
			})
	}

	return &job
}
