package main

import (
	"fmt"
	"sort"

	v1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/client-go/kubernetes"
)

// func defaultHandler(w http.ResponseWriter, r *http.Request) {
func defaultHandler() {
	clientset := getClientSet()
	images := getUniqueImagesFromPods(clientset)
	for _, image := range images {
		// if rand.Intn(100) < 97 {
		// 	continue
		// }

		fmt.Printf("Scanning image %s\n", image)
		err := scanImage(clientset, image)
		if err != nil {
			fmt.Printf("Error %v", err)
		}
	}

	// listen to new pods - scan if they have not been scanned recently
}

func getUniqueImagesFromPods(clientset *kubernetes.Clientset) []string {
	pods, err := clientset.CoreV1().Pods("").List(metav1.ListOptions{})
	if err != nil {
		panic(err.Error())
	}
	return getUniqueImages((pods.Items))
}

func getUniqueImages(pods []v1.Pod) []string {
	imagesExist := map[string]bool{}
	images := []string{}
	for _, pod := range pods {
		if pod.Status.Phase != v1.PodRunning {
			// only running images - should include jobs run since last get
			continue
		}

		for _, container := range pod.Spec.Containers {
			if !imagesExist[container.Image] {
				imagesExist[container.Image] = true
				images = append(images, container.Image)
			}
		}
		for _, container := range pod.Spec.InitContainers {
			if !imagesExist[container.Image] {
				imagesExist[container.Image] = true
				images = append(images, container.Image)
			}
		}
	}
	sort.Strings(images)
	fmt.Printf("There are %d unique images in the cluster\n", len(images))
	return images
}
